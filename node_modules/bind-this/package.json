{
  "name": "bind-this",
  "version": "0.0.1",
  "description": "Function scope binding with partial application.",
  "main": "bind-this.js",
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/st3redstripe/bindThis"
  },
  "author": {
    "name": "@st3redstripe"
  },
  "license": "BSD",
  "readme": "# bindThis\n\nFunction scope binding with partial application.\n\n## Usage\n\nRequire the module.\n\n```js\nvar bindThis = require('bindThis');\n```\n\n### Binding\n\nPass a function bind to the immediate scope.\n\n```js\nthis.foo = 'bar';\n\nvar bound = bindThis(function () {\n\treturn this.foo;\n});\n\nbound(); // 'bar'\n```\n\nPass a scope to scope to override the default context.\n\n```js\nvar bound = bindThis({ foo: 'bar' }, function () {\n\treturn this.foo;\n});\n\nbound(); // 'bar'\n```\n\nPass a string instead of of a function to resolve the function from the context.\n\n```js\nvar parseRadixTen = bindThis('parseInt', null, 10);\n```\n\n###Â Partial Application\n\nAny further arguments will be used to partially apply the function. Pass `null` to 'skip' a parameter.\n\n```js\nvar append = function (str, append) {\n\treturn str + append;\n};\n\nvar appendBar = bindThis(append, null, 'bar');\n\nappendBar('foo'); // 'foobar'\n```\n\n## Tests\n\n```bash\n$ npm test\n```\n",
  "readmeFilename": "README.md",
  "_id": "bind-this@0.0.1",
  "_from": "bind-this@*"
}
